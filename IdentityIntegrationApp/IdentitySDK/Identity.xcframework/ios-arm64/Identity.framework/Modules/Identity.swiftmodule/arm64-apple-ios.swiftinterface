// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.5 (swiftlang-1300.0.31.1 clang-1300.0.29.1)
// swift-module-flags: -target arm64-apple-ios13.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name Identity
import AVFoundation
import AuthenticationServices
import CommonCrypto
import Foundation
@_exported import Identity
import LocalAuthentication
import SafariServices
import Swift
import SystemConfiguration
import UIKit
import _Concurrency
extension Foundation.Date {
  public func isEqualTo(_ date: Foundation.Date) -> Swift.Bool
  public func isGreaterThan(_ date: Foundation.Date) -> Swift.Bool
  public func isSmallerThan(_ date: Foundation.Date) -> Swift.Bool
}
extension Foundation.Date {
  public func epirationDate(with timestamp: Swift.Int) -> Foundation.Date
}
extension Foundation.Date {
  public func isAccessTokenExpired(with token: Foundation.Data?) -> Swift.Bool
}
@_inheritsConvenienceInitializers public class EnrollResponse : Identity.BaseAPIResponse {
  required public init(from decoder: Swift.Decoder) throws
  @objc deinit
}
public protocol AuthenticationViewModelProtocol {
  var didReceiveAccessToken: ((Swift.Bool, Swift.String, Identity.AccessToken?) -> Swift.Void)? { get set }
  var didReceiveRefreshToken: ((Swift.Bool, Swift.String, Identity.AccessToken?) -> Swift.Void)? { get set }
  var didLoggedOut: ((Swift.Bool, Swift.String) -> Swift.Void)? { get set }
  var didDeviceEnrolled: ((Swift.Bool, Swift.String) -> Swift.Void)? { get set }
  func fetchAuthToken(code: Swift.String, pkce: Identity.AuthOPKCE?)
}
@_hasMissingDesignatedInitializers public class AuthenticationViewModel {
  public var didReceiveAccessToken: ((Swift.Bool, Swift.String, Identity.AccessToken?) -> Swift.Void)?
  public var didReceiveRefreshToken: ((Swift.Bool, Swift.String, Identity.AccessToken?) -> Swift.Void)?
  public var didDeviceEnrolled: ((Swift.Bool, Swift.String) -> Swift.Void)?
  public var didLoggedOut: ((Swift.Bool, Swift.String) -> Swift.Void)?
  @objc deinit
}
extension Identity.AuthenticationViewModel : Identity.AuthenticationViewModelProtocol {
  public func fetchAuthToken(code: Swift.String, pkce: Identity.AuthOPKCE?)
}
extension Identity.AuthenticationViewModel {
  public func sendRefreshToken(code: Swift.String, refreshToken: Swift.String, pkce: Identity.AuthOPKCE?)
}
extension Identity.AuthenticationViewModel {
  public func logout()
}
public struct AppInfo {
}
public typealias NodeCompletion<T> = (_ result: T?, _ error: Swift.Error?) -> Swift.Void
public var CyberArkAuthProvider: Identity.CyberarkAuthProvider {
  get
}
public protocol CyberarkAuthProviderProtocol : AnyObject {
  func login(account: Identity.CyberarkAccount)
  func resume(url: Foundation.URL)
  var didReceiveAccessToken: ((Swift.Bool, Swift.String, Identity.AccessToken?) -> Swift.Void)? { get set }
  var didReceiveRefreshToken: ((Swift.Bool, Swift.String, Identity.AccessToken?) -> Swift.Void)? { get set }
  var didReceiveLogoutResponse: ((Swift.Bool, Swift.String) -> Swift.Void)? { get set }
}
@_hasMissingDesignatedInitializers public class CyberarkAuthProvider : Identity.CyberarkAuthProviderProtocol {
  public var didReceiveAccessToken: ((Swift.Bool, Swift.String, Identity.AccessToken?) -> Swift.Void)?
  public var didReceiveRefreshToken: ((Swift.Bool, Swift.String, Identity.AccessToken?) -> Swift.Void)?
  public var didReceiveLogoutResponse: ((Swift.Bool, Swift.String) -> Swift.Void)?
  @objc deinit
}
extension Identity.CyberarkAuthProvider {
  public func webAuth() -> Identity.CyberArkBrowserBuilder?
}
extension Identity.CyberarkAuthProvider {
  public func login(account: Identity.CyberarkAccount)
  public func resume(url: Foundation.URL)
}
extension Identity.CyberarkAuthProvider {
  public func closeSession(account: Identity.CyberarkAccount)
}
extension Identity.CyberarkAuthProvider {
  public func sendRefreshToken()
  public func dismiss()
}
@_hasMissingDesignatedInitializers public class Logger {
  @objc deinit
}
@_hasMissingDesignatedInitializers public class DeviceManager {
  public func getUUID() -> Swift.String?
  @objc deinit
}
public enum Result<T, U> where U : Swift.Error {
  case success(T)
  case failure(U)
}
public class BaseAPIResponse : Swift.Codable {
  required public init(from decoder: Swift.Decoder) throws
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
}
public protocol IdentityError : Swift.Error {
}
public enum IdentitySDKError : Identity.IdentityError {
  case emptyConfiguration
  case invalidConfiguration
  case requestFailed
  case invalidData
  case invalidurl
  case unknownError
  public static func == (a: Identity.IdentitySDKError, b: Identity.IdentitySDKError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum IdentityOAuthError : Identity.IdentityError {
  case oAuth_invalidRequest(Swift.String?)
  case oAuth_invalid(Swift.String?)
  case oAuth_invalidGrant(Swift.String?)
  case oAuth_unauthorized(Swift.String?)
  case oAuth_unsupportedGrantType(Swift.String?)
  case oAuth_unsupportedResponseType(Swift.String?)
  case oAuth_invalidScope(Swift.String?)
  case oAuth_missingOrInvalidRedirectURI(Swift.String?)
  case oAuth_accessDenied(Swift.String?)
  case oAuth_invalidPKCEState
  case unknown
}
public enum CyberArkBrowserError : Identity.IdentityError {
  case failure
  case inprogress
  case cancelled
  public static func == (a: Identity.CyberArkBrowserError, b: Identity.CyberArkBrowserError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension Swift.String {
  public func encodeUrl() -> Swift.String?
  public func decodeUrl() -> Swift.String?
  public func toData() -> Foundation.Data?
}
extension Swift.String {
  public var isValidURL: Swift.Bool {
    get
  }
}
public enum KeychainError : Swift.Error {
  case create_error
  case operation_error
  public static func == (a: Identity.KeychainError, b: Identity.KeychainError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum KeyChainStorageKeys : Swift.String {
  case accessToken
  case grantCode
  case refreshToken
  case access_token_expiresIn
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@_hasMissingDesignatedInitializers public class KeyChainWrapper {
  public static let standard: Identity.KeyChainWrapper
  public var serviceName: Swift.String {
    get
  }
  public func save(key: Swift.String, data: Foundation.Data) throws
  public func fetch(key: Swift.String) throws -> Foundation.Data?
  public func string(for key: Swift.String) throws -> Swift.String?
  public func delete(key: Swift.String) throws
  @objc deinit
}
public protocol EnrollmentProviderProtocol {
  func enroll(baseURL: Swift.String)
  var didReceiveEnrollmentApiResponse: ((Swift.Bool, Swift.String) -> Swift.Void)? { get set }
}
public class EnrollmentProvider : Identity.EnrollmentProviderProtocol {
  public var didReceiveEnrollmentApiResponse: ((Swift.Bool, Swift.String) -> Swift.Void)?
  public init()
  @objc deinit
}
extension Identity.EnrollmentProvider {
  public func enroll(baseURL: Swift.String)
}
@objc @_hasMissingDesignatedInitializers public class CyberArkBrowserBuilder : ObjectiveC.NSObject {
  @discardableResult
  @objc(setWebType:) public func set(webType: Identity.WebType) -> Identity.CyberArkBrowserBuilder
  @discardableResult
  @objc(setPresentingViewController:) public func set(presentingViewController: UIKit.UIViewController) -> Identity.CyberArkBrowserBuilder
  @discardableResult
  @objc(setCustomKey:CustomValue:) public func setCustomParam(key: Swift.String, value: Swift.String) -> Identity.CyberArkBrowserBuilder
  @discardableResult
  @objc(setDomain:) public func set(domain: Swift.String) -> Identity.CyberArkBrowserBuilder
  @discardableResult
  @objc(setSystemURL:) public func set(systemURL: Swift.String) -> Identity.CyberArkBrowserBuilder
  @discardableResult
  @objc(setScope:) public func set(scope: Swift.String) -> Identity.CyberArkBrowserBuilder
  @discardableResult
  @objc(setClientId:) public func set(clientId: Swift.String) -> Identity.CyberArkBrowserBuilder
  @discardableResult
  @objc(setRedirectUri:) public func set(redirectUri: Swift.String) -> Identity.CyberArkBrowserBuilder
  @discardableResult
  @objc(setApplicationID:) public func set(applicationID: Swift.String) -> Identity.CyberArkBrowserBuilder
  @discardableResult
  @objc(setlLogoutUri:) public func set(logoutUri: Swift.String) -> Identity.CyberArkBrowserBuilder
  @objc public func build() -> Identity.CyberarkAccount
  @objc deinit
}
public enum APIError : Swift.Error {
  case requestFailed
  case jsonConversionFailure
  case invalidData
  case responseUnsuccessful
  case jsonParsingFailure
  case unauthorized
  public static func == (a: Identity.APIError, b: Identity.APIError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct APIRequestConstants {
}
public enum HttpRequestType {
  case basic
  case bearer
  case multipart
  case jsonContentType
  public static func == (a: Identity.HttpRequestType, b: Identity.HttpRequestType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public typealias HTTPHeaders = [Swift.String : Swift.String]
public enum DataType {
  case JSON
  case Data
  public static func == (a: Identity.DataType, b: Identity.DataType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension UIKit.UIViewController {
  @_Concurrency.MainActor(unsafe) public func showAlert(with title: Swift.String? = "", message: Swift.String)
}
extension Foundation.Data {
  public var JSONObject: Swift.AnyObject? {
    get
  }
  public static func make(fromJSONObject obj: Swift.AnyObject) -> Foundation.Data?
  public init<T>(from value: T)
  public func to<T>(type: T.Type) -> T
}
extension Foundation.Data {
  public func encodeBase64URLSafe() -> Swift.String?
}
extension Foundation.Data {
  public func toString() -> Swift.String?
}
extension Foundation.URL {
  public func queryParameter(with param: Swift.String) -> Swift.String?
}
public protocol LAContextProtocol {
  func canEvaluatePolicy(_: LocalAuthentication.LAPolicy, error: Foundation.NSErrorPointer) -> Swift.Bool
  func evaluatePolicy(_ policy: LocalAuthentication.LAPolicy, localizedReason: Swift.String, reply: @escaping (Swift.Bool, Swift.Error?) -> Swift.Void)
}
public enum BiometricError : Foundation.LocalizedError {
  case authenticationFailed
  case userCancel
  case userFallback
  case biometricsNotAvailable
  case biometricsNotEnrolled
  case biometricksLockout
  case unknown
  public var errorDescription: Swift.String {
    get
  }
  public static func == (a: Identity.BiometricError, b: Identity.BiometricError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
final public class BiometricsAuthenticator {
  public init(context: Identity.LAContextProtocol = LAContext(), policy: LocalAuthentication.LAPolicy = .deviceOwnerAuthenticationWithBiometrics, localizedReason: Swift.String = "Verify your Identity")
  final public func canEvaluatePolicy() -> Swift.Bool
  final public func authenticateUser(completion: @escaping (Identity.Result<Swift.Bool, Identity.BiometricError>) -> Swift.Void)
  @objc deinit
}
extension LocalAuthentication.LAContext : Identity.LAContextProtocol {
}
public typealias ResultHandler = (Identity.Result<Swift.Bool, Identity.APIError>) -> Swift.Void
public protocol AVCaptureDeviceProtocl {
  func authorizationStatus(for mediaType: AVFoundation.AVMediaType) -> AVFoundation.AVAuthorizationStatus
  func requestAccess(for mediaType: AVFoundation.AVMediaType, completionHandler handler: @escaping (Swift.Bool) -> Swift.Void)
}
public protocol QRCodeReaderBuilderProtocol {
  func authenticateWithQRCode(presenter: UIKit.UIViewController, completion: @escaping Identity.ResultHandler)
}
public class QRAuthenticationProvider {
  public init()
  public var viewModel: Identity.QRAuthViewModel
  @objc deinit
}
extension Identity.QRAuthenticationProvider : Identity.QRCodeReaderBuilderProtocol {
  public func authenticateWithQRCode(presenter: UIKit.UIViewController, completion: @escaping Identity.ResultHandler)
  public func fetchAccessTokenWithQRCode(qrCode: Swift.String)
}
public protocol UIApplicationProtocol {
  func open(_ url: Foundation.URL)
}
@_hasMissingDesignatedInitializers final public class Reachability {
  public static func isConnectedToNetwork() -> Swift.Bool
  @objc deinit
}
extension Foundation.URLRequest {
  public init?(urlString: Swift.String)
}
public enum UserDefaultsKeys : Swift.String {
  case isDeviceEnrolled
  case isBiometricOnAppLaunchEnabled
  case isBiometricWhenAccessTokenExpiresEnabled
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@objc @_hasMissingDesignatedInitializers public class CyberarkAccount : ObjectiveC.NSObject {
  @objc deinit
}
@_hasMissingDesignatedInitializers public class QRAuthViewModel {
  public var didReceiveAuth: ((Swift.Error?, Swift.String?) -> Swift.Void)?
  @objc deinit
}
public enum IdentityLoginType {
  case oidc
  case auth0
  case fido
  public static func == (a: Identity.IdentityLoginType, b: Identity.IdentityLoginType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum IdentityType : Swift.CaseIterable {
  case web
  case qrcode
  case totp
  case push
  case otp
  public static func == (a: Identity.IdentityType, b: Identity.IdentityType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public typealias AllCases = [Identity.IdentityType]
  public static var allCases: [Identity.IdentityType] {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
@objc public enum WebType : Swift.Int {
  case webview
  case sfsafari
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public typealias didFinishingbrowserOperationCallback = (_ result: Swift.String?, _ error: Swift.Error?) -> Swift.Void
@objc @_hasMissingDesignatedInitializers public class CyberArkBrowser : ObjectiveC.NSObject {
  public func login(completion: @escaping Identity.didFinishingbrowserOperationCallback)
  public func closeSession(completion: @escaping Identity.didFinishingbrowserOperationCallback)
  @objc deinit
}
extension Identity.CyberArkBrowser : SafariServices.SFSafariViewControllerDelegate {
  @objc dynamic public func safariViewControllerDidFinish(_ controller: SafariServices.SFSafariViewController)
  @objc dynamic public func safariViewController(_ controller: SafariServices.SFSafariViewController, initialLoadDidRedirectTo URL: Foundation.URL)
}
public struct AccessToken : Swift.Codable {
  public var access_token: Swift.String?
  public var token_type: Swift.String?
  public var expires_in: Swift.Int?
  public var scope: Swift.String?
  public var refresh_token: Swift.String?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers public class AuthOPKCE {
  @objc deinit
}
extension UIKit.UIDevice {
  @_Concurrency.MainActor(unsafe) public static var identifier: Swift.String? {
    get
  }
  @_Concurrency.MainActor(unsafe) public var isIPhone: Swift.Bool {
    get
  }
  @_Concurrency.MainActor(unsafe) public var isIPad: Swift.Bool {
    get
  }
  @_Concurrency.MainActor(unsafe) public static var iOSVersion: Swift.String? {
    get
  }
}
extension UIKit.UIDevice {
  @_Concurrency.MainActor(unsafe) public static let modelName: Swift.String?
}
extension Identity.IdentitySDKError : Swift.Equatable {}
extension Identity.IdentitySDKError : Swift.Hashable {}
extension Identity.CyberArkBrowserError : Swift.Equatable {}
extension Identity.CyberArkBrowserError : Swift.Hashable {}
extension Identity.KeychainError : Swift.Equatable {}
extension Identity.KeychainError : Swift.Hashable {}
extension Identity.KeyChainStorageKeys : Swift.Equatable {}
extension Identity.KeyChainStorageKeys : Swift.Hashable {}
extension Identity.KeyChainStorageKeys : Swift.RawRepresentable {}
extension Identity.APIError : Swift.Equatable {}
extension Identity.APIError : Swift.Hashable {}
extension Identity.HttpRequestType : Swift.Equatable {}
extension Identity.HttpRequestType : Swift.Hashable {}
extension Identity.DataType : Swift.Equatable {}
extension Identity.DataType : Swift.Hashable {}
extension Identity.BiometricError : Swift.Equatable {}
extension Identity.BiometricError : Swift.Hashable {}
extension Identity.UserDefaultsKeys : Swift.Equatable {}
extension Identity.UserDefaultsKeys : Swift.Hashable {}
extension Identity.UserDefaultsKeys : Swift.RawRepresentable {}
extension Identity.IdentityLoginType : Swift.Equatable {}
extension Identity.IdentityLoginType : Swift.Hashable {}
extension Identity.IdentityType : Swift.Equatable {}
extension Identity.IdentityType : Swift.Hashable {}
extension Identity.WebType : Swift.Equatable {}
extension Identity.WebType : Swift.Hashable {}
extension Identity.WebType : Swift.RawRepresentable {}
