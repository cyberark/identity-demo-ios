
/* Copyright (c) 2021 CyberArk Software Ltd. All rights reserved.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
import XCTest
@testable import Identity

class EnrollmentViewModelTests: XCTestCase {
    
    var suitViewModel: EnrollmentViewModel!
    
    var mockAPIService: EnrollmentViewModelApiService!
    
    override func setUp() {
        super.setUp()
        deleteGranCode()
        saveGrantCode()
        mockAPIService = EnrollmentViewModelApiService()
        suitViewModel = EnrollmentViewModel(apiClient: mockAPIService)
    }
    
    override func tearDown() {
        deleteGranCode()
        suitViewModel = nil
        mockAPIService = nil
        suitViewModel = nil
        super.tearDown()
    }
    
    func deleteGranCode() {
        do {
            let keyChain = KeyChainWrapper.standard
            try keyChain.delete(key: KeyChainStorageKeys.grantCode.rawValue)
        } catch {
            debugPrint("error: \(error)")
        }
    }
    
    func saveGrantCode() {
        do {
            let keyChain = KeyChainWrapper.standard
            let data = "grantCode".toData() ?? Data()
            try keyChain.save(key: KeyChainStorageKeys.grantCode.rawValue, data: data)
        } catch {
            debugPrint("error: \(error)")
        }
    }

    func testEnrollDevice_Success() {
        let delayExpectation = expectation(description: "Waiting for QR Auth request failed")
        // Fulfill the expectation after 2 seconds
        DispatchQueue.main.async {
            delayExpectation.fulfill()
        }

        mockAPIService.completeClosure = { result in
            XCTAssertNotNil(result)
        }
        suitViewModel.enrollDevice(baseURL: "url")
        waitForExpectations(timeout: 2)
        mockAPIService.fetchSuccess()
        
    }
    func testEnrollDevice_Fail() {
        mockAPIService.completeClosure = { result in
            XCTAssertNotNil(result)
        }
        suitViewModel.enrollDevice(baseURL: "url")
        mockAPIService.fetchFail(error: nil)
    }
}
class EnrollmentViewModelApiService: EnrollmentClientProtocol {
    func enrollDevice(from accesstoken: String, baseURL: String, completion: @escaping (Result<EnrollResponse?, APIError>) -> Void) {
        completeClosure = completion
    }
    
    var enrollmentModel: EnrollResponse? = MockEnrollAPIAPIServiceGenerator().stubAuthModel()
    
    var completeClosure: ((Result<EnrollResponse?, APIError>) -> Void?)? = nil

    func fetchSuccess() {
        if let handler = completeClosure {
            handler(Result.success(enrollmentModel))
        }
    }
    
    func fetchFail(error: APIError?) {
        if let handler = completeClosure {
            handler(Result.failure(.invalidData))
        }
    }
}
class MockEnrollAPIAPIServiceGenerator {
    func stubAuthModel() -> EnrollResponse? {
        let value = "{\"success\":true,\"Result\":{\"WelcomeInfo\":{\"Icon\":\"data:image/png;\",\"IconBackgroundColor\":\"#FFFFFF\",\"WelcomeText\":\"By clicking Enroll below, you agree to your company\'s acceptable use policy and to the enforcement of their security policies.\",\"IconUrl\":\"https://aae5953.my.idaptive.qa/IosAppRest/IconImage?hash=BA59F0ACF4A2613559A3845511619004\"},\"UserCert\":\"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\"},\"Message\":null,\"MessageID\":null,\"Exception\":null,\"ErrorID\":null,\"ErrorCode\":null,\"IsSoftError\":false,\"InnerExceptions\":null}"
        let decoder = JSONDecoder()
        decoder.dateDecodingStrategy = .iso8601
        if let data = value.toData() {
            let authModel = try! decoder.decode(EnrollResponse.self, from: data)
            return authModel
        }
        return nil
    }
}
